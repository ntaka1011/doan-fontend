/* eslint-disable-next-line @next/next/no-img-element */
import Wrapper from "@/components/Wrapper";
import { v4 as uuidv4 } from "uuid";
import Link from "next/link";
import React, { useContext, useEffect, useState } from "react";
import "react-responsive-carousel/lib/styles/carousel.min.css"; // requires a loader
import { Carousel } from "react-responsive-carousel";
import { AiOutlineDown, AiOutlineMinus, AiOutlinePlus } from "react-icons/ai";
import ProductItem from "@/components/ProductItem";
import { useRouter } from "next/router";
import { useProducts } from "@/hooks/useProduct";
import { useCategory } from "@/hooks/useCategories";
import { Product } from "@/types/product";
import { toast } from "react-toastify";
import { useAppDispatch } from "@/hooks/useSelector";
import { addCart } from "@/store/cartSlice";
import Spinner from "@/components/Spinner";
import { LoadingContext } from "@/context/LoadingContext";

const Product = () => {
  const [selectSize, setSelectSize] = useState();
  const { loading, setOpenLoading, setCloseLoading } =
    useContext(LoadingContext);
  const router = useRouter();
  const slugProduct = router.query.slug;
  const dispatch = useAppDispatch();
  const { getProductBySlug, getProducts } = useProducts();
  const { getCategories } = useCategory();
  const { data: product, mutate } = getProductBySlug(String(slugProduct));

  const { data: category } = getCategories({ _id: product?.categories[0] });

  const { data: products } = getProducts();

  const [quantity, setQuantity] = useState<number>(1);
  console.log("üöÄ ~ file: [slug].tsx:30 ~ Product ~ quantity:", quantity);
  const [active, setActive] = useState<number>(1);
  const [color, setColor] = useState<string>("Ch·ªçn m√†u s·∫Øc");
  const images = product?.images;

  useEffect(() => {
    loadData();
  }, [product]);

  const loadData = async () => {
    try {
      setOpenLoading();
      await mutate();
    } finally {
      setCloseLoading();
    }
  };

  const handleIncreaseQuantity = () => {
    setQuantity(quantity + 1);
  };
  const handleDecreaseQuantity = () => {
    setQuantity(quantity - 1);
  };

  const updateActive = (id: number) => {
    setActive(id);
  };

  const handleAddProduct = () => {
    if (quantity < product?.quantity) {
      if (!selectSize) {
        toast.error("L√†m ∆°n h√£y ch·ªçn size", {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
        });
      } else {
        dispatch(
          addCart({
            cartItem: product,
            uuid: uuidv4(),
            quantity: quantity,
            color: color,
            selectSize,
            oneQuantityPrice: product?.price,
          })
        );
        toast.success("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng", {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
        });
      }
    } else {
      toast.error(`S·∫£n ph·∫©m ch·ªâ c√≤n l·∫°i ${product.quantity}`, {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
    }
  };
  return (
    <>
      {loading ? <Spinner /> : ""}
      <Wrapper className="px-[15px]">
        <div className="flex text-sm py-5">
          <Link
            href={"/"}
            className="mr-4 hover:text-[#35c0c5] hover:cursor-pointer"
          >
            Trang ch·ªß
          </Link>
          <span className="w-4">/</span>
          {/* <Link href={`/category/${category[0].slug}`}> */}
          <span className="mr-4 hover:text-[#35c0c5]">
            {category && category[0]?.name}
          </span>
          {/* </Link> */}
          <span className="w-4">/</span>
          <span className="text-[#35c0c5]">{product?.title}</span>
        </div>
      </Wrapper>
      <Wrapper className="px-[15px]">
        <div className="block lg:flex w-full">
          <div className="w-full lg:w-[41.666667%] pr-[15px]">
            <Carousel
              infiniteLoop
              showIndicators={false}
              showStatus={false}
              thumbWidth={60}
              className="productCarousel"
            >
              {images?.map((image: any, index: number) => (
                // eslint-disable-next-line @next/next/no-img-element
                <img key={index} src={image} alt="image" />
              ))}
            </Carousel>
          </div>
          <div className="w-full lg:w-[58.333333%] pl-[15px]">
            <p className="text-2xl font-medium text-[#464646] mb-[10px]">
              {product?.title}
            </p>
            <div className="flex items-center pb-[5px] border-b mb-[15px]">
              <div className="flex items-center">
                <p className="text-sm font-bold mr-[5px]">Th∆∞∆°ng hi·ªáu: </p>
                <p className="text-sm">{category && category[0]?.name}</p>
              </div>
              <p className="flex justify-center w-4">|</p>
              <div className="flex items-center">
                <p className="text-sm font-bold mr-[5px]">T√¨nh tr·∫°ng: </p>
                <p className="text-sm">
                  {product?.quantity && product?.quantity >= 1
                    ? "C√≤n h√†ng"
                    : "H·∫øt h√†ng"}
                </p>
              </div>
            </div>
            <div className="flex mb-[15px] items-center">
              <p className="text-[#35c0c5] font-bold text-[26px] leading-5 mr-[10px]">
                {product?.price.toLocaleString("en-US").replace(/,/g, ".")}‚Ç´
              </p>

              {product?.original_price && (
                <p className="leading-5 text-[20px] text-slate-500 italic line-through ">
                  {product?.original_price
                    .toLocaleString("en-US")
                    .replace(/,/g, ".")}
                  ‚Ç´
                </p>
              )}
            </div>
            <div className="py-[15px]">
              <p className="text-sm">- B·∫£o h√†nh: 12 th√°ng</p>
              <p className="text-sm">- Xu·∫•t x·ª©: {product?.origin}</p>
              <p className="text-sm">- Ch·∫•t li·ªáu: {product?.material}</p>
            </div>
            <div>
              <div className="mt-[10px] flex items-center pb-2">
                <p className="w-[100px] h-10 flex items-center">M√†u s·∫Øc:</p>
                <div className="pl-5 pr-7 w-[300px] h-[40px] border border-[#eaebf3] flex items-center justify-between group relative">
                  <span className="text-[13px]">{color}</span>
                  <AiOutlineDown className="text-gray-600" size={12} />
                  <div className="hidden absolute top-[39px] left-[-1px] w-[300px] z-20 border bg-white group-hover:block">
                    {product?.color.map((color: string, index: number) => (
                      <div
                        onClick={() => setColor(color)}
                        key={index}
                        className="text-[13px] pl-5 pr-7 w-[300px] h-[34px] flex items-center border-b hover:cursor-pointer hover:text-[#35c0c5]"
                      >
                        {color}
                      </div>
                    ))}
                  </div>
                </div>
              </div>
              <div className="flex items-center gap-5">
                <div className="mt-[10px] relative flex items-center pb-2 ">
                  <p className="w-[100px] h-[45px] flex items-center">
                    S·ªë l∆∞·ª£ng:
                  </p>
                  <div className="relative">
                    <input
                      className="w-[80px] text-sm text-center h-[45px] py-[5px] text-[#363636] pr-[23px] border outline-none"
                      value={quantity}
                      min={1}
                      max={99}
                      onChange={(e: any) => setQuantity(e.target.value)}
                      type="number"
                      pattern="\d*"
                      maxLength={2}
                    />
                    <button
                      className="w-[25px] h-[23px] border-l flex justify-center items-center text-[#999] border-b absolute top-0 right-0 hover:bg-[#35c0c5] hover:text-white"
                      onClick={handleIncreaseQuantity}
                    >
                      <AiOutlinePlus size={12} />
                    </button>
                    <button
                      className="w-[25px] h-[23px] border-l flex justify-center items-center text-[#999] absolute top-[23px] right-0 hover:bg-[#35c0c5] hover:text-white"
                      onClick={handleDecreaseQuantity}
                    >
                      <AiOutlineMinus size={12} />
                    </button>
                  </div>
                </div>
                <div>
                  <button
                    onClick={handleAddProduct}
                    className="px-[25px] h-[45px] bg-[#35c0c5] text-white text-sm border border-[#35c0c5] hover:bg-white hover:text-[#35c0c5]"
                  >
                    Th√™m v√†o gi·ªè h√†ng
                  </button>
                </div>
                <div>
                  <p className="text-sm">
                    G·ªçi <span className="text-[#35c0c5]">1900 6750</span> ƒë·ªÉ
                    ƒë∆∞·ª£c tr·ª£ gi√∫p
                  </p>
                </div>
              </div>
              <div>
                <p className="w-[100px] h-[45px] flex items-center">US SIZE:</p>
                <div className="flex items-center gap-[15px] hover:cursor-pointer">
                  {product?.size.map((item: any, index: number) => (
                    <div
                      key={index}
                      className={`text-sm w-[36px] h-[38px] mx-[5px] my-[6px] border flex justify-center items-center ${
                        active === index ? "bg-[#35c0c5]" : ""
                      }`}
                      onClick={() => {
                        setSelectSize(item?.size);
                        updateActive(index);
                      }}
                    >
                      {item.size}
                    </div>
                  ))}
                </div>
              </div>
              <div className="mt-[15px] mb-[50px]">
                <Link
                  href={"/choiceSize"}
                  className="px-[10.500px] py-[5.250px] border"
                >
                  H∆∞·ªõng d·∫´n ch·ªçn size
                </Link>
              </div>
            </div>
          </div>
        </div>
        <div className="mb-[100px]">
          <ul className="block text-center lg:flex">
            <li
              className={`py-[10px] px-[30px] uppercase cursor-pointer ${
                active === 1 ? "active" : ""
              }`}
            >
              Th√¥ng tin s·∫£n ph·∫©m
            </li>
            <li
              className={`py-[10px] px-[30px] border uppercase cursor-pointer ${
                active === 15 ? "active" : ""
              }`}
            >
              Thanh to√°n v·∫≠n chuy·ªÉn
            </li>
            <li
              className={`py-[10px] px-[30px] border uppercase cursor-pointer ${
                active === 16 ? "active" : ""
              }`}
            >
              ƒê√°nh gi√° s·∫£n ph·∫©m
            </li>
          </ul>
          <div className="border-t border-[#e1e1e1]">
            <div className="p-[15px]">
              <p className="mb-[15px] text-[13px] text-[#898989]">
                Gi√†y th·ªÉ thao nam ƒë·∫πp da m√†u n√¢u cao c·∫•p, thanh l·ªãch t·ª´ th∆∞∆°ng
                <br />
                hi·ªáu Converse¬Æ Ch·∫•t li·ªáu gi√†y b·∫±ng da b√≤ m·ªÅm v·ªõi chi ti·∫øt m≈©i
                gi√†y
                <br />
                cap-toe M·∫Øt x·ªè d√¢y √¢m v·ªõi d√¢y c·ªôt nylon L√≥t trong b·∫±ng da tho√°ng
                <br />
                kh√≠ t·ª± nhi√™n ƒê·ªám l√≥t gi√†y b·∫±ng da b·ªçc tho·∫£i m√°i v√† h·ªó tr·ª£ ch√¢n
                ƒê·∫ø
                <br />
                ngo√†i bƒÉng cao su h·∫•p th·ª• s·ªëc t·ªët v√† b√°m t·ªët tr√™n m·ªçi b·ªÅ m·∫∑t
                <br />
              </p>
              <p className="text-[13px] text-[#898989]">
                ƒê∆∞·ª£c th√†nh l·∫≠p v√†o nƒÉm 1978, th∆∞∆°ng hi·ªáu Nine West xu·∫•t ph√°t t·ª´
                ƒë·ªãa ch·ªâ ·ªü th√†nh ph·ªë New York. Trong 30 nƒÉm, Nine West ƒë√£ ph√°t
                tri·ªÉn v√† tr·ªü th√†nh ng∆∞·ªùi ƒë·ª©ng ƒë·∫ßu trong lƒ©nh v·ª±c th·ªùi trang n·ªïi
                ti·∫øng th·∫ø gi·ªõi. Ng√†y nay, gi·∫ßy - t√∫i x√°ch - trang s·ª©c Nine West
                ƒë∆∞·ª£c y√™u m·∫øn b·ªüi ph·ª• n·ªØ tr√™n to√†n th·∫ø gi·ªõi v√† ƒë∆∞·ª£c xem nh∆∞ m·ªôt
                chuy√™n gia t∆∞ v·∫•n ƒë√°ng tin c·∫≠y trong m·ªçi lƒ©nh v·ª±c th·ªùi trang,
                bao g·ªìm c·∫£ th·ªùi trang tr·∫ª em
              </p>
            </div>
          </div>
        </div>
        <Link
          href={"/"}
          className="text-center mb-[30px] hover:text-[#35c0c5] hover:cursor-pointer relative w-full px-5 text-lg font-bold uppercase flex justify-center pb-5 before:absolute before:w-full before:h-[1px] before:left-0 before:bg-[#ebebeb] before:z-999 before:top-[35px] border-b border-[#ebebeb]"
        >
          S·∫£n ph·∫©m li√™n quan
        </Link>
        <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-2 md:gap-[30px] mb-[30px]">
          {products?.slice(0, 4).map((product: Product, index: number) => (
            <ProductItem key={index} product={product} />
          ))}
        </div>
      </Wrapper>
    </>
  );
};

export default Product;
